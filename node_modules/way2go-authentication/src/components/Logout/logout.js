import React from 'react';
import axios from 'axios';
import {Storage} from 'way2go-common';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import * as LoginActions from '../Login/LoginActions';
import * as Constants from '../Constants/constants';
import AuthenticationContext from './../../assets/scripts/adal.min.js';
import storageOptions from '../Constants/storage';
import * as ApiUrls from '../Constants/apiUrls';

class Logout extends React.Component {
    constructor(props) {
        super(props);
        this.logout = this.logout.bind(this);
    }

    componentWillMount() {
      this.logout();
    }

    logout(){
        let authModeResponse = this.props.authModeResponse;
        axios.post(ApiUrls.authservice+"/auth/logout", {
            "key": Storage().getAuthToken()
        }).then((response) => {
            if (response.data.outputStatus == "success") {

              let loginUrl = "/authentication/login";
                const orgId = Storage().getValue(Storage().options.ORG_ID);
                if(orgId)
                loginUrl = loginUrl + "/" + orgId + "/loggedOut";


              // Logout from ADFS
              if(Storage().getValue(storageOptions.IS_ADFS_ENABLED)) {
                this.props.actions.getAuthenticationMode(orgId);

              } else {

                Storage().cleanStorage();
                if (orgId) 
                Storage().setValue(Storage().options.ORG_ID, orgId);

                window.location.href = loginUrl;
              }



            }
        });
    }

    render(){
        return(
        <div>
          {this.props.authModeResponse && this.props.authModeResponse.isADFSenabled && <ADFSLogout domain={this.props.authModeResponse.domain} graphApiUri={this.props.authModeResponse.graphApiUri}></ADFSLogout>}
        </div>);
    }
}

const ADFSLogout = (props) => {

          window.config = {
                  subscriptionId: Constants.subscriptionId,
                  clientId: Constants.clientId,
                  postLogoutRedirectUri: window.location.origin,
                  extraQueryParameter: 'domain_hint=' + props.domain + '',
                  endpoints: {
                    graphApiUri: props.graphApiUri
                  }
                };

          let authContext = new AuthenticationContext(config);

          authContext.handleWindowCallback();

          let ad_user = authContext.getCachedUser();

          const orgId = localStorage.getItem("orgId");

          localStorage.clear();

          if (orgId)
            localStorage.setItem("orgId", orgId);

          authContext.logOut();
}

const mapStateToProps = (state, ownProps) => {
    return {
        authModeResponse: state.login.authModeResponse
    };
};

const mapDispatchToProps = (dispatch, ownProps) => {
    return {
      actions: bindActionCreators(LoginActions, dispatch)
    };
};

export default connect(mapStateToProps, mapDispatchToProps)(Logout);
