import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import * as LoginActions from './LoginActions';
import LoginComponent from './LoginComponent';
import ADFSLoginComponent from './ADFSLoginComponent';
import { Storage, RedirectFunctions, LoadingIconComponent } from 'way2go-common';
import * as ApiUrls from '../Constants/apiUrls';
import * as Constants from '../Constants/constants';
import axios from 'axios';

class LoginPage extends React.Component {
    constructor(props, context) {
        super(props, context);

        //start - if authtoken found in local storage redirect to home page
        // const authtoken = Storage().getValue(Storage().options.AUTH_TOKEN)
        // if(authtoken){
        //     const redirectUrl = RedirectFunctions.getAfterLoginUrl();
        //     this.context.router.history.push(redirectUrl);
        // }
        //end - if authtoken found in local storage redirect to home page

        let orgId = Constants.defaultOrgId;
        if (props.match.params.orgId) { //take orgId from params
            orgId = props.match.params.orgId;
        }

        Storage().setValue(Storage().options.ORG_ID, orgId); //store in locale storage

        let loginObj = {
            userName: "",
            password: "",
            orgId: orgId
        };
        let forgotPwdObj = {
            userName: "",
            email: "",
            orgId: orgId
        };

        this.state = {
            loginObj: Object.assign({}, loginObj),
        };

        this.loginSubmit = this.loginSubmit.bind(this);
        this.redirectToHome = this.redirectToHome.bind(this);
        this.updateLoginObjState = this.updateLoginObjState.bind(this);
        this.afterADFSAuthentication = this.afterADFSAuthentication.bind(this);
    }

    componentWillMount() {

      if(this.props.match.params.loggedOut == 'loggedOut') {
        this.setState({loggedOut: true});
      }

      this.props.actions.getAuthenticationMode(this.state.loginObj.orgId);
    }

    updateLoginObjState(event) {
        const field = event.target.name;
        let loginObj = Object.assign({}, this.state.loginObj);
        loginObj[field] = event.target.value;
        return this.setState({ loginObj: loginObj });
    }
    loginSubmit(event) {
        if(event) {
          event.preventDefault();
        }
        this.setState({loggedOut: false});
        this.props.actions.login(this.state.loginObj)
            .then(() => this.redirect());
    }

    afterADFSAuthentication(dataObj) {
      let newLoginObj = Object.assign({}, this.state.loginObj, {userName: dataObj.userName, password: dataObj.password, IDToken: dataObj.IDToken, domain: dataObj.domain});
      this.state.loginObj = newLoginObj;
      this.setState({loginObj: newLoginObj});

      this.loginSubmit();
    }

    redirect() {
        const response = this.props.loginResponse;
        if (response.outputCode == 200) {
            const responseData = response.data;
            Storage().setValue(Storage().options.AUTH_TOKEN, responseData.key);
            Storage().setValue(Storage().options.LOCALE, responseData.locale);
            Storage().setValue(Storage().options.USER_ROLES, responseData.userroles);
            Storage().setValue(Storage().options.USER_ID, responseData.userId, true);
            Storage().setValue(Storage().options.USERNAME, responseData.userName, true);

            const userDetails={
                "fn": responseData.firstName,
                "ln": responseData.lastName,
                "un": responseData.userName,
                "ui": responseData.userId
            }
            Storage().setValue(Storage().options.USER_DETAILS, userDetails);

            const themesFetchReqObj = {
                "key": Storage().getValue(Storage().options.AUTH_TOKEN),
                "data": { orgId: Storage().getValue(Storage().options.ORG_ID).toString() }
            };

            this.props.actions.themesFetch(themesFetchReqObj)
                .then(() => this.redirectToHome());
        }
    }

    redirectToHome() {
        const response = this.props.themesResponse;
        const themesObj = {
            primary: response.Details.themes.primary,
            secondary: response.Details.themes.secondary,
            warning: response.Details.themes.warning
        };

        try {
            Storage().setValue(Storage().options.THEME, themesObj);
        } catch (err) {}

        //const params = new URLSearchParams(this.props.location.search);
        //const returnUrl = params.get('returnUrl');

        const redirectUrl = RedirectFunctions.getAfterLoginUrl();
        this.context.router.history.push(redirectUrl);
    }

    render() {
        return (
            <div>
            {
              this.props.authModeResponse ?  (this.props.authModeResponse.isADFSenabled ?

                <div>
                    <ADFSLoginComponent domain={this.props.authModeResponse.domain} graphApiUri={this.props.authModeResponse.graphApiUri} afterAuthentication={this.afterADFSAuthentication} />
                </div>
                :
                <LoginComponent
                    loginObj={this.state.loginObj}
                    loginSubmit={this.loginSubmit}
                    loginResponseObj={this.props.loginResponse}
                    onChange={this.updateLoginObjState}
                    showLoggedOut={this.state.loggedOut}
                />)
              : <div style={{textAlign: 'center'}}>Loading...</div>
            }
            </div>
        );
    }
}

LoginPage.propTypes = {
    actions: PropTypes.object.isRequired,
    loginResponse: PropTypes.object.isRequired,
    location:PropTypes.object.isRequired,
    match:PropTypes.object.isRequired,
    themesResponse:PropTypes.object.isRequired
};

LoginPage.contextTypes = {
    router: PropTypes.object
};

const mapStateToProps = (state, ownProps) => {
    return {
        loginResponse: state.login.loginResponse,
        themesResponse: state.login.themesResponse,
        authModeResponse: state.login.authModeResponse
    };
};

const mapDispatchToProps = (dispatch, ownProps) => {
    return {
        actions: bindActionCreators(LoginActions, dispatch)
    };
};

export default connect(mapStateToProps, mapDispatchToProps)(LoginPage);
