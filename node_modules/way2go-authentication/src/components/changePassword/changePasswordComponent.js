import React from 'react';
import ReactDOM from 'react-dom';

import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';
import Paper from 'material-ui/Paper';
import FontIcon from 'material-ui/FontIcon';
import TextField from 'material-ui/TextField';
import {Card, CardActions, CardHeader, CardMedia, CardTitle, CardText} from 'material-ui/Card';
import Divider from 'material-ui/Divider';
import RaisedButton from 'material-ui/RaisedButton';
import Snackbar from 'material-ui/Snackbar';

import Container from 'muicss/lib/react/container';
import Row from 'muicss/lib/react/row';
import Col from 'muicss/lib/react/col';

import muiThemeable from 'material-ui/styles/muiThemeable';

import Redirect from 'react-router/Redirect';

import {AlertService} from 'way2go-common'; 

import ChangePasswordApi from './changePasswordAction';

import {FormattedMessage, injectIntl, intlShape} from 'react-intl';
import {messages} from '../Messages';

const snackBarHeight={
    height:"70%"
}
class ChangePassword extends React.Component{
    constructor(props){
        super(props);
        this.state = { 
            statusMessage: "",
            oldPassword:"",
            newPassword:"",
            confirmPassword:"",
            errorMsgOldPassword:"",
            errorMsgNewPassword:"",
            errorMsgConfirmPassword:"",
            showAlert:false,
            open:true
         };
    }
    //function to hit the api and get the response
    saveChanges=(user)=>{
		 ChangePasswordApi.changePassword(user).then(response => {

             if(response.data.message === "success"){
                 this.setState({statusMessage:response.data.data,showAlert:true});
             }
             else{
                this.setState({statusMessage:response.data.message,showAlert:true});
             }
         })
	}
    handleOldPassword=(e)=> {
        this.setState({oldPassword: e.target.value});
        // console.log("length of event",e.target.value.length);
        if(e.target.value.length == 0){
            console.log("length",e.target.value.length);
            this.setState({errorMsgOldPassword:"This field is required"});
        }
        else{
            this.setState({errorMsgOldPassword:""});
        }
    }
    handleNewPassword=(e)=>{
        this.setState({newPassword: e.target.value});
         // console.log("length of event",e.target.value.length);
        if(e.target.value.length == 0){
            console.log("length",e.target.value.length);
            this.setState({errorMsgNewPassword:"This field is required"});
        }
        else{
            this.setState({errorMsgNewPassword:""});
        }
    }
    handleConfirmPassword=(e)=>{
        this.setState({confirmPassword: e.target.value});
         // console.log("length of event",e.target.value.length);
        if(e.target.value.length == 0){
            console.log("length",e.target.value.length);
            this.setState({errorMsgConfirmPassword:"This field is required"});
        }
        else{
            this.setState({errorMsgConfirmPassword:""});
        }
    }
    handleSubmit=()=>{
        if(this.state.oldPassword==null || this.state.oldPassword == undefined || this.state.oldPassword.length == 0){
            // console.log("length",this.state.oldPassword.length);
            this.setState({errorMsgOldPassword:"This field is required"});
        }
        if(this.state.newPassword.length==0){
            this.setState({errorMsgNewPassword:"This field is required"});
        }
        if(this.state.confirmPassword.length==0){
            this.setState({errorMsgConfirmPassword:"This field is required"});
        }
        if(this.state.oldPassword.length!=0 && this.state.newPassword.length!=0 && this.state.confirmPassword.length!=0)
        {
            var user={};

            if(this.state.newPassword === this.state.confirmPassword)
            {
                user=Object.assign({},{oldPassword:this.state.oldPassword,newPassword:this.state.newPassword});
                // console.log("object",user);
                this.saveChanges(user);
            }
            else
            {
                this.setState({statusMessage:"Password doesnot match"});
                // console.log("status message passwrd doesnt match",this.state.statusMessage);
            }
        }    
    }
    //this function is called when cancel button is clicked and it redirects to home 
    cancel=()=>{
        var path="/";
        this.setState({redirect: true, path: path });
    }
    render(){
        return(
            <div>
                <Container>
                    <Row> 
                        <div className="profileHeaderDiv"><i className="material-icons lockIcon">lock</i>
                            <span className="profileHeader">
                                <FormattedMessage
                                    id="change_password"
                                    defaultMessage={`Change Password`}
                                />
                            </span>
                        </div>
                    </Row>
                    <Row>
                        <Paper style={{width:"420px",margin:"auto",height:"420px"}}>
                            <div className="mui--text-center">
                                <TextField
                                    floatingLabelText={this.props.intl.formatMessage(messages.old_password)}
                                    type="password"
                                    className="mui--text-left passwordTextField"
                                    errorText={this.state.errorMsgOldPassword}
                                    name={this.state.oldPassword}
                                    onChange={this.handleOldPassword}
                                />
                                <TextField 
                                    floatingLabelText={this.props.intl.formatMessage(messages.new_password)}
                                    type="password"
                                    className="mui--text-left passwordTextField"
                                    errorText={this.state.errorMsgNewPassword}
                                    name={this.state.newPassword}
                                    onChange={this.handleNewPassword}
                                />
                                <TextField 
                                    floatingLabelText={this.props.intl.formatMessage(messages.confirm_password)}
                                    type="password"
                                    className="mui--text-left passwordTextField"
                                    errorText={this.state.errorMsgConfirmPassword}
                                    name={this.state.confirmPassword}
                                    onChange={this.handleConfirmPassword} 
                                />
                            </div>
                            <div className="mui--text-center" ></div>
                            <div  className="mui--text-center" style={{"marginTop":"30px"}}>
                                <RaisedButton type="submit"className="saveButton" onClick={this.handleSubmit}  label="Save" primary={true} />
						        {this.state.redirect && <Redirect to={{ pathname: this.state.path}}/>}
                                <RaisedButton type="button" label="Cancel"  onClick={this.cancel}/>
                            </div>
                            
                        </Paper>
                    </Row>    
                    {/*{this.state.showAlert && <AlertService open={true}  message="hi" /> }*/}
                    <Snackbar
                        open={this.state.showAlert}
                        message={this.state.statusMessage}
                        autoHideDuration={4000}
                        bodyStyle={snackBarHeight}
                    />
                    </Container>
            </div>    
        );
    }
}
ChangePassword.propTypes={
	intl: intlShape.isRequired
};

export default  injectIntl(muiThemeable()(ChangePassword));