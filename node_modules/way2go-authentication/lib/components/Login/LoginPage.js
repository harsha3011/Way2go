'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRedux = require('react-redux');

var _redux = require('redux');

var _LoginActions = require('./LoginActions');

var LoginActions = _interopRequireWildcard(_LoginActions);

var _LoginComponent = require('./LoginComponent');

var _LoginComponent2 = _interopRequireDefault(_LoginComponent);

var _ADFSLoginComponent = require('./ADFSLoginComponent');

var _ADFSLoginComponent2 = _interopRequireDefault(_ADFSLoginComponent);

var _way2goCommon = require('way2go-common');

var _apiUrls = require('../Constants/apiUrls');

var ApiUrls = _interopRequireWildcard(_apiUrls);

var _constants = require('../Constants/constants');

var Constants = _interopRequireWildcard(_constants);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LoginPage = function (_React$Component) {
    _inherits(LoginPage, _React$Component);

    function LoginPage(props, context) {
        _classCallCheck(this, LoginPage);

        //start - if authtoken found in local storage redirect to home page
        // const authtoken = Storage().getValue(Storage().options.AUTH_TOKEN)
        // if(authtoken){
        //     const redirectUrl = RedirectFunctions.getAfterLoginUrl();
        //     this.context.router.history.push(redirectUrl);
        // }
        //end - if authtoken found in local storage redirect to home page

        var _this = _possibleConstructorReturn(this, (LoginPage.__proto__ || Object.getPrototypeOf(LoginPage)).call(this, props, context));

        var orgId = Constants.defaultOrgId;
        if (props.match.params.orgId) {
            //take orgId from params
            orgId = props.match.params.orgId;
        }

        (0, _way2goCommon.Storage)().setValue((0, _way2goCommon.Storage)().options.ORG_ID, orgId); //store in locale storage

        var loginObj = {
            userName: "",
            password: "",
            orgId: orgId
        };
        var forgotPwdObj = {
            userName: "",
            email: "",
            orgId: orgId
        };

        _this.state = {
            loginObj: Object.assign({}, loginObj)
        };

        _this.loginSubmit = _this.loginSubmit.bind(_this);
        _this.redirectToHome = _this.redirectToHome.bind(_this);
        _this.updateLoginObjState = _this.updateLoginObjState.bind(_this);
        _this.afterADFSAuthentication = _this.afterADFSAuthentication.bind(_this);
        return _this;
    }

    _createClass(LoginPage, [{
        key: 'componentWillMount',
        value: function componentWillMount() {

            if (this.props.match.params.loggedOut == 'loggedOut') {
                this.setState({ loggedOut: true });
            }

            this.props.actions.getAuthenticationMode(this.state.loginObj.orgId);
        }
    }, {
        key: 'updateLoginObjState',
        value: function updateLoginObjState(event) {
            var field = event.target.name;
            var loginObj = Object.assign({}, this.state.loginObj);
            loginObj[field] = event.target.value;
            return this.setState({ loginObj: loginObj });
        }
    }, {
        key: 'loginSubmit',
        value: function loginSubmit(event) {
            var _this2 = this;

            if (event) {
                event.preventDefault();
            }
            this.setState({ loggedOut: false });
            this.props.actions.login(this.state.loginObj).then(function () {
                return _this2.redirect();
            });
        }
    }, {
        key: 'afterADFSAuthentication',
        value: function afterADFSAuthentication(dataObj) {
            var newLoginObj = Object.assign({}, this.state.loginObj, { userName: dataObj.userName, password: dataObj.password, IDToken: dataObj.IDToken, domain: dataObj.domain });
            this.state.loginObj = newLoginObj;
            this.setState({ loginObj: newLoginObj });

            this.loginSubmit();
        }
    }, {
        key: 'redirect',
        value: function redirect() {
            var _this3 = this;

            var response = this.props.loginResponse;
            if (response.outputCode == 200) {
                var responseData = response.data;
                (0, _way2goCommon.Storage)().setValue((0, _way2goCommon.Storage)().options.AUTH_TOKEN, responseData.key);
                (0, _way2goCommon.Storage)().setValue((0, _way2goCommon.Storage)().options.LOCALE, responseData.locale);
                (0, _way2goCommon.Storage)().setValue((0, _way2goCommon.Storage)().options.USER_ROLES, responseData.userroles);
                (0, _way2goCommon.Storage)().setValue((0, _way2goCommon.Storage)().options.USER_ID, responseData.userId, true);
                (0, _way2goCommon.Storage)().setValue((0, _way2goCommon.Storage)().options.USERNAME, responseData.userName, true);

                var userDetails = {
                    "fn": responseData.firstName,
                    "ln": responseData.lastName,
                    "un": responseData.userName,
                    "ui": responseData.userId
                };
                (0, _way2goCommon.Storage)().setValue((0, _way2goCommon.Storage)().options.USER_DETAILS, userDetails);

                var themesFetchReqObj = {
                    "key": (0, _way2goCommon.Storage)().getValue((0, _way2goCommon.Storage)().options.AUTH_TOKEN),
                    "data": { orgId: (0, _way2goCommon.Storage)().getValue((0, _way2goCommon.Storage)().options.ORG_ID).toString() }
                };

                this.props.actions.themesFetch(themesFetchReqObj).then(function () {
                    return _this3.redirectToHome();
                });
            }
        }
    }, {
        key: 'redirectToHome',
        value: function redirectToHome() {
            var response = this.props.themesResponse;
            var themesObj = {
                primary: response.Details.themes.primary,
                secondary: response.Details.themes.secondary,
                warning: response.Details.themes.warning
            };

            try {
                (0, _way2goCommon.Storage)().setValue((0, _way2goCommon.Storage)().options.THEME, themesObj);
            } catch (err) {}

            //const params = new URLSearchParams(this.props.location.search);
            //const returnUrl = params.get('returnUrl');

            var redirectUrl = _way2goCommon.RedirectFunctions.getAfterLoginUrl();
            this.context.router.history.push(redirectUrl);
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'div',
                null,
                this.props.authModeResponse ? this.props.authModeResponse.isADFSenabled ? _react2.default.createElement(
                    'div',
                    null,
                    _react2.default.createElement(_ADFSLoginComponent2.default, { domain: this.props.authModeResponse.domain, graphApiUri: this.props.authModeResponse.graphApiUri, afterAuthentication: this.afterADFSAuthentication })
                ) : _react2.default.createElement(_LoginComponent2.default, {
                    loginObj: this.state.loginObj,
                    loginSubmit: this.loginSubmit,
                    loginResponseObj: this.props.loginResponse,
                    onChange: this.updateLoginObjState,
                    showLoggedOut: this.state.loggedOut
                }) : _react2.default.createElement(
                    'div',
                    { style: { textAlign: 'center' } },
                    'Loading...'
                )
            );
        }
    }]);

    return LoginPage;
}(_react2.default.Component);

LoginPage.propTypes = {
    actions: _propTypes2.default.object.isRequired,
    loginResponse: _propTypes2.default.object.isRequired,
    location: _propTypes2.default.object.isRequired,
    match: _propTypes2.default.object.isRequired,
    themesResponse: _propTypes2.default.object.isRequired
};

LoginPage.contextTypes = {
    router: _propTypes2.default.object
};

var mapStateToProps = function mapStateToProps(state, ownProps) {
    return {
        loginResponse: state.login.loginResponse,
        themesResponse: state.login.themesResponse,
        authModeResponse: state.login.authModeResponse
    };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch, ownProps) {
    return {
        actions: (0, _redux.bindActionCreators)(LoginActions, dispatch)
    };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(LoginPage);