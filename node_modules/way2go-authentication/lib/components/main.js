'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouterDom = require('react-router-dom');

var _routes = require('./routes');

var _routes2 = _interopRequireDefault(_routes);

require('../css/style.scss');

var _reactIntl = require('react-intl');

var _fr = require('react-intl/locale-data/fr');

var _fr2 = _interopRequireDefault(_fr);

var _en = require('react-intl/locale-data/en');

var _en2 = _interopRequireDefault(_en);

var _way2goCommon = require('way2go-common');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
//This component handles the App template used on every page          

var locale = (0, _way2goCommon.Storage)().getValue((0, _way2goCommon.Storage)().options.LOCALE);

/* start for i18n - translations */
var localizedMessages = {};
try {
  localizedMessages = require('../translations/' + locale + '.json');
} catch (err) {
  console.log("supported translation file not found", err);
}
(0, _reactIntl.addLocaleData)([].concat(_toConsumableArray(_en2.default), _toConsumableArray(_fr2.default)));
/* end for i18n - translations */

var Main = function Main() {
  return _react2.default.createElement(
    _reactIntl.IntlProvider,
    { locale: locale, messages: localizedMessages },
    _react2.default.createElement(
      'main',
      { id: 'authentication' },
      _react2.default.createElement(
        _reactRouterDom.Switch,
        null,
        routes
      )
    )
  );
};

var routes = [];
for (var index = 0; index < _routes2.default.length; index++) {
  routes.push(_react2.default.createElement(_reactRouterDom.Route, { key: index, exact: true, path: _routes2.default[index].path, component: _routes2.default[index].component }));
}

// function PrivateRoute ({component: Component, authed}) {
//   return (
//     <Route
//       render={(props) => authed === true
//         ? <Component {...props} />
//         : <Redirect to={{pathname: '/login', state: {from: props.location}}} />}
//     />
//   )
// }

exports.default = Main;