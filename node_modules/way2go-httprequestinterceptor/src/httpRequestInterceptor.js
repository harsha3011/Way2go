import axios from 'axios';
import Dialog from 'material-ui/Dialog';
import * as constants from './constants';
import HttpRequestInterceptor from './requestInterceptor';

// Add a request interceptor 
axios.interceptors.request.use(function (config) {
  // Do something before request is sent 

  // var throughgateway = commonServices.getParameterByName("throughgateway", config.url);
  // var mediaType = commonServices.getParameterByName("mediaType", config.url);

  const throughgateway = true;
  const mediaType = false;

  if (throughgateway == "false") { //don't add custom headers if 'throughgateway' is false
  }
  else if (mediaType == "true") {
    config.headers['Ocp-Apim-Trace'] = constants.httpHeaders['Ocp-Apim-Trace'];
    config.headers['Ocp-Apim-Subscription-Key'] = constants.httpHeaders['Ocp-Apim-Subscription-Key'];
  } else {
    config.headers['Content-Type'] = constants.httpHeaders['Content-Type'];
    config.headers['Ocp-Apim-Trace'] = constants.httpHeaders['Ocp-Apim-Trace'];
    config.headers['Ocp-Apim-Subscription-Key'] = constants.httpHeaders['Ocp-Apim-Subscription-Key'];
  }


  return config;
}, function (error) {
  // Do something with request error 
  return Promise.reject(error);
});

// Add a response interceptor 
axios.interceptors.response.use(function (response) {
  // Do something with response data 
  if (response.data.outputCode == 503 || response.data.outputCode == 501) {
      alert("Session Expired");
      let loginUrl = "/authentication/login";

      const orgId = localStorage.getItem("orgId");
      if(orgId)
        loginUrl = loginUrl + "/" + orgId;

      localStorage.clear();
      if (orgId) 
        localStorage.setItem("orgId", orgId);

      window.location.href = loginUrl + "?returnUrl="+window.location.pathname;
  } else return response;
}, function (error) {
  // Do something with response error 
  return Promise.reject(error);
});




