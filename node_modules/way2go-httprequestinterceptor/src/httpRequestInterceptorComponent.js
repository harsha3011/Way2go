import React from 'react';
import axios from 'axios';
import * as constants from './constants';
import Dialog from 'material-ui/Dialog';
import RaisedButton from 'material-ui/RaisedButton';

/**
 * Alerts are urgent interruptions, requiring acknowledgement, that inform the user about a situation.
 */
export default class HttpRequestInterceptor extends React.Component {
  constructor() {
    super();
    this.state = {
      open: false
    };
    this.requestInterceptor();
    this.responseInterceptor();
  }

  getParameterByName = (name, url) => {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
 }

  requestInterceptor = () => {
    var thisObj = this;
    // Add a request interceptor 
    axios.interceptors.request.use(function (config) {
      // Do something before request is sent 
      var throughgateway = thisObj.getParameterByName("throughgateway", config.url);
      var mediaType = thisObj.getParameterByName("mediaType", config.url);

      if (throughgateway == "false") { //don't add custom headers if 'throughgateway' is false
      } else if (mediaType == "true") {
        config.headers['Ocp-Apim-Trace'] = constants.httpHeaders['Ocp-Apim-Trace'];
        config.headers['Ocp-Apim-Subscription-Key'] = constants.httpHeaders['Ocp-Apim-Subscription-Key'];
      } else {
        config.headers['Content-Type'] = constants.httpHeaders['Content-Type'];
        config.headers['Ocp-Apim-Trace'] = constants.httpHeaders['Ocp-Apim-Trace'];
        config.headers['Ocp-Apim-Subscription-Key'] = constants.httpHeaders['Ocp-Apim-Subscription-Key'];
      }


      return config;
    }, function (error) {
      // Do something with request error 
      return Promise.reject(error);
    });
  }

  responseInterceptor = () => {
    var thisObj = this;
    // Add a response interceptor 
    axios.interceptors.response.use(function (response) {
      // Do something with response data 
      if (response.data.outputCode == 503 || response.data.outputCode == 501 || response.data.outputCode == 41400004 || response.data.outputCode == 40500004) {
        thisObj.setState({
          open: true
        });
      } else return response;
    }, function (error) {
      // Do something with response error 
      return Promise.reject(error);
    });
  }

  handleOpen = () => {
    this.setState({
      open: true
    });
  };

  handleClose = () => {
    this.setState({
      open: false
    });
    this.redirectToLogin();
  };

  redirectToLogin = () => {
    let loginUrl = "/authentication/login";

    const orgId = localStorage.getItem("orgId");
    if (orgId)
      loginUrl = loginUrl + "/" + orgId;

    localStorage.clear();
    if (orgId)
      localStorage.setItem("orgId", orgId);

    window.location.href = loginUrl + "?returnUrl=" + window.location.pathname;
  }

  render() {
    const actions = [ <RaisedButton
      label = "Ok"
      primary = {true}
      onClick = {this.handleClose}
      />
    ];

    return ( <div>
      <Dialog title = "Session Expired"
      actions = {actions}
      modal = {false}
      open = {this.state.open}
      onRequestClose = {this.handleClose} contentStyle={{maxWidth: '400px'}}>
        Session has expired, take me to login page. 
      </Dialog> 
      </div>
    );
  }
}
