'use strict';

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _Dialog = require('material-ui/Dialog');

var _Dialog2 = _interopRequireDefault(_Dialog);

var _constants = require('./constants');

var constants = _interopRequireWildcard(_constants);

var _requestInterceptor = require('./requestInterceptor');

var _requestInterceptor2 = _interopRequireDefault(_requestInterceptor);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Add a request interceptor 
_axios2.default.interceptors.request.use(function (config) {
  // Do something before request is sent 

  // var throughgateway = commonServices.getParameterByName("throughgateway", config.url);
  // var mediaType = commonServices.getParameterByName("mediaType", config.url);

  var throughgateway = true;
  var mediaType = false;

  if (throughgateway == "false") {//don't add custom headers if 'throughgateway' is false
  } else if (mediaType == "true") {
    config.headers['Ocp-Apim-Trace'] = constants.httpHeaders['Ocp-Apim-Trace'];
    config.headers['Ocp-Apim-Subscription-Key'] = constants.httpHeaders['Ocp-Apim-Subscription-Key'];
  } else {
    config.headers['Content-Type'] = constants.httpHeaders['Content-Type'];
    config.headers['Ocp-Apim-Trace'] = constants.httpHeaders['Ocp-Apim-Trace'];
    config.headers['Ocp-Apim-Subscription-Key'] = constants.httpHeaders['Ocp-Apim-Subscription-Key'];
  }

  return config;
}, function (error) {
  // Do something with request error 
  return Promise.reject(error);
});

// Add a response interceptor 
_axios2.default.interceptors.response.use(function (response) {
  // Do something with response data 
  if (response.data.outputCode == 503 || response.data.outputCode == 501) {
    alert("Session Expired");
    var loginUrl = "/authentication/login";

    var orgId = localStorage.getItem("orgId");
    if (orgId) loginUrl = loginUrl + "/" + orgId;

    localStorage.clear();
    if (orgId) localStorage.setItem("orgId", orgId);

    window.location.href = loginUrl + "?returnUrl=" + window.location.pathname;
  } else return response;
}, function (error) {
  // Do something with response error 
  return Promise.reject(error);
});