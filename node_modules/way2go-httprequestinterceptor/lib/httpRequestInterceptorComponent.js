'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _constants = require('./constants');

var constants = _interopRequireWildcard(_constants);

var _Dialog = require('material-ui/Dialog');

var _Dialog2 = _interopRequireDefault(_Dialog);

var _RaisedButton = require('material-ui/RaisedButton');

var _RaisedButton2 = _interopRequireDefault(_RaisedButton);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Alerts are urgent interruptions, requiring acknowledgement, that inform the user about a situation.
 */
var HttpRequestInterceptor = function (_React$Component) {
  _inherits(HttpRequestInterceptor, _React$Component);

  function HttpRequestInterceptor() {
    _classCallCheck(this, HttpRequestInterceptor);

    var _this = _possibleConstructorReturn(this, (HttpRequestInterceptor.__proto__ || Object.getPrototypeOf(HttpRequestInterceptor)).call(this));

    _this.getParameterByName = function (name, url) {
      if (!url) url = window.location.href;
      name = name.replace(/[\[\]]/g, "\\$&");
      var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
          results = regex.exec(url);
      if (!results) return null;
      if (!results[2]) return '';
      return decodeURIComponent(results[2].replace(/\+/g, " "));
    };

    _this.requestInterceptor = function () {
      var thisObj = _this;
      // Add a request interceptor 
      _axios2.default.interceptors.request.use(function (config) {
        // Do something before request is sent 
        var throughgateway = thisObj.getParameterByName("throughgateway", config.url);
        var mediaType = thisObj.getParameterByName("mediaType", config.url);

        if (throughgateway == "false") {//don't add custom headers if 'throughgateway' is false
        } else if (mediaType == "true") {
          config.headers['Ocp-Apim-Trace'] = constants.httpHeaders['Ocp-Apim-Trace'];
          config.headers['Ocp-Apim-Subscription-Key'] = constants.httpHeaders['Ocp-Apim-Subscription-Key'];
        } else {
          config.headers['Content-Type'] = constants.httpHeaders['Content-Type'];
          config.headers['Ocp-Apim-Trace'] = constants.httpHeaders['Ocp-Apim-Trace'];
          config.headers['Ocp-Apim-Subscription-Key'] = constants.httpHeaders['Ocp-Apim-Subscription-Key'];
        }

        return config;
      }, function (error) {
        // Do something with request error 
        return Promise.reject(error);
      });
    };

    _this.responseInterceptor = function () {
      var thisObj = _this;
      // Add a response interceptor 
      _axios2.default.interceptors.response.use(function (response) {
        // Do something with response data 
        if (response.data.outputCode == 503 || response.data.outputCode == 501 || response.data.outputCode == 41400004 || response.data.outputCode == 40500004) {
          thisObj.setState({
            open: true
          });
        } else return response;
      }, function (error) {
        // Do something with response error 
        return Promise.reject(error);
      });
    };

    _this.handleOpen = function () {
      _this.setState({
        open: true
      });
    };

    _this.handleClose = function () {
      _this.setState({
        open: false
      });
      _this.redirectToLogin();
    };

    _this.redirectToLogin = function () {
      var loginUrl = "/authentication/login";

      var orgId = localStorage.getItem("orgId");
      if (orgId) loginUrl = loginUrl + "/" + orgId;

      localStorage.clear();
      if (orgId) localStorage.setItem("orgId", orgId);

      window.location.href = loginUrl + "?returnUrl=" + window.location.pathname;
    };

    _this.state = {
      open: false
    };
    _this.requestInterceptor();
    _this.responseInterceptor();
    return _this;
  }

  _createClass(HttpRequestInterceptor, [{
    key: 'render',
    value: function render() {
      var actions = [_react2.default.createElement(_RaisedButton2.default, {
        label: 'Ok',
        primary: true,
        onClick: this.handleClose
      })];

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          _Dialog2.default,
          { title: 'Session Expired',
            actions: actions,
            modal: false,
            open: this.state.open,
            onRequestClose: this.handleClose, contentStyle: { maxWidth: '400px' } },
          'Session has expired, take me to login page.'
        )
      );
    }
  }]);

  return HttpRequestInterceptor;
}(_react2.default.Component);

exports.default = HttpRequestInterceptor;