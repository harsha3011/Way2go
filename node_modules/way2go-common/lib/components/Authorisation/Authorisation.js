"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Storage = require("../Storage/");

var _Storage2 = _interopRequireDefault(_Storage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Authorisation = function () {
  function Authorisation() {
    _classCallCheck(this, Authorisation);

    this.features = {
      "default_access": { "featureId": [] },
      "booking_access": { "featureId": [4010, 5010] },
      "analytics_access": { "featureId": [9010] },
      "admin_access": { "featureId": [1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018] },
      "landingpage_mytravels": { "featureId": [4020, 5020] },
      "landingpage_myteam_travels": { "featureId": [4021, 5021] },
      "tmc_travel_access": { "featureId": [4510] },
      "tmc_accomodation_access": { "featureId": [5024] },
      "tmc_expense_access": { "featureId": [6014] },
      "booking_flight": { "featureId": [4010] },
      "booking_accommodation": { "featureId": [5010] },
      "/bookingPage": { "featureId": [4010, 5010] },
      "/travelDetailsPage": { "featureId": [4011, 5011] },
      "/travelSearchResults": { "featureId": [4012, 5012] },
      "/preConfirmationPage": { "featureId": [4013, 5013] },
      "/itineraryPage": { "featureId": [4014, 5014] },
      "/tmcLanding": { "featureId": [4510, 5510] },
      "/unauthorizedPage": { "featureId": [] },
      "delegator_access": { "featureId": [3010] },
      "techSupport_access": { "featureId": [1110] },
      "impersonateTC_access": { "featureId": [4511, 5511] },
      "/userSelectorTS": { "featureId": [1110] },
      "/userSelectorTC": { "featureId": [4511, 5511] },
      "/expensePage": { "featureId": [6010] },
      "/expenseLanding": { "featureId": [6010] },
      "tmc_access": { "featureId": [4510, 5510] },
      "cubepage_access": { "featureId": [1010, 2010] },
      "/orgPage": { "featureId": [1010] },
      "/userPage": { "featureId": [3016] },
      "/modulePage": { "featureId": [1012] },
      "/rolePage": { "featureId": [1016] },
      "/partnerPage": { "featureId": [1017] },
      "/genericPage": { "featureId": [1017] },
      "/airlineSabrePage": { "featureId": [1017] },
      "/hotelSabrePage": { "featureId": [1017] },
      "/countryCurrencyPage": { "featureId": [1021] },
      "/addCountryCurrency": { "featureId": [1021] },
      "/cityMasterPage": { "featureId": [1021] },
      "/addCityMasterPage": { "featureId": [1021] },
      "/smtpSettingsPage": { "featureId": [1015] },
      "/productSettingsPage": { "featureId": [2010] },
      "/notificationSettingsPage": { "featureId": [2017] },
      "/expenseSettingsPage": { "featureId": [2020] },
      "/ruleFilePage": { "featureId": [2012, 2013] },
      "/addUserPage": { "featureId": [3013, 3014, 3015] },
      "/groupMasterPage": { "featureId": [3017, 3018] },
      "/addMasterGroup": { "featureId": [3017, 3018] },
      "/travelPartnerPage": { "featureId": [2018] },
      "/hospitalityPartnerPage": { "featureId": [2019] },
      "/groupExpenseMasterPage": { "featureId": [2020] },
      "/masterPage": { "featureId": [1021] },
      "/authenticationSettingsPage": { "featureId": [2112] },
      "/enterPriseProfilePage": { "featureId": [2111] },
      "/viewApiDetailsPage": { "featureId": [2110] },
      "tmc_assignTask": { "featureId": [1112] },
      "tmc_unAssignTask": { "featureId": [1113] },
      "payment_batch_access": { "featureId": [6019] },
      "manager_approval_access": { "featureId": [6013] },
      "travel_allowance_access": { "featureId": [6018] },
      "sbt": { "featureId": "4030" }
    };

    this.hasPermission = this.hasPermission.bind(this);
    this.hasPermissionWithKey = this.hasPermissionWithKey.bind(this);
    this.getDelegatorName = this.getDelegatorName.bind(this);
    this.isDelegatorMode = this.isDelegatorMode.bind(this);
    this.saveDelegatorObj = this.saveDelegatorObj.bind(this);
  }

  _createClass(Authorisation, [{
    key: "hasPermission",
    value: function hasPermission(obj) {
      if ((typeof obj === "undefined" ? "undefined" : _typeof(obj)) !== 'object') obj = JSON.parse(obj);

      var featureId = obj.featureId;
      //return checkRolesNModulesV2(modules, roles);
      return this.checkRolesNModules(featureId);
    }
  }, {
    key: "hasPermissionWithKey",
    value: function hasPermissionWithKey(key, isPage) {

      if (isPage == undefined && this.features[key] == undefined) //if key not present return true;
        return false;

      var featureId = this.features[key].featureId;
      //var roles = thisObj.features[key].roles;
      if (key === "default_access") return true;else return this.checkRolesNModules(featureId);
    }
  }, {
    key: "checkRolesNModules",
    value: function checkRolesNModules(featureId) {
      var result = false;
      try {
        var userRoles = (0, _Storage2.default)().getValue((0, _Storage2.default)().options.USER_ROLES);
        var delegatorMode = this.isDelegatorMode();
        var featureIds = [];

        if (delegatorMode == false) {
          featureIds = userRoles[0].self;
        } else {
          featureIds = this.getDelegatorFeatureIds();
        }
        result = this.checkObject(featureIds, featureId);
      } catch (err) {}
      return result;
    }
  }, {
    key: "checkObject",
    value: function checkObject(featureIds, featureId) {
      var result = false;
      featureIds.forEach(function (data) {
        if (featureId.indexOf(data) !== -1) {
          result = true;
        }
      });

      return result;
    }
  }, {
    key: "saveDelegatorObj",
    value: function saveDelegatorObj(delegator) {
      var objDelegator = {
        dm: true,
        doid: delegator.orgId,
        duid: delegator.userId,
        dname: delegator.firstName + ' ' + delegator.lastName,
        dur: delegator.delegatorUserRoles,
        st: delegator.switchType
      };

      (0, _Storage2.default)().setValue((0, _Storage2.default)().options.DELEGATOR, objDelegator);
    }
  }, {
    key: "isDelegatorMode",
    value: function isDelegatorMode() {
      var delegatorObj = (0, _Storage2.default)().getValue((0, _Storage2.default)().options.DELEGATOR);
      return delegatorObj != undefined && delegatorObj.dm;
    }
  }, {
    key: "getDelegatorOrgId",
    value: function getDelegatorOrgId() {
      var delegatorObj = (0, _Storage2.default)().getValue((0, _Storage2.default)().options.DELEGATOR);
      return delegatorObj && delegatorObj.doid;
    }
  }, {
    key: "getDelegatorUserId",
    value: function getDelegatorUserId() {
      var delegatorObj = (0, _Storage2.default)().getValue((0, _Storage2.default)().options.DELEGATOR);
      return delegatorObj && delegatorObj.duid;
    }
  }, {
    key: "getDelegatorName",
    value: function getDelegatorName() {
      var delegatorObj = (0, _Storage2.default)().getValue((0, _Storage2.default)().options.DELEGATOR);
      return delegatorObj && delegatorObj.dname;
    }
  }, {
    key: "getDelegatorFeatureIds",
    value: function getDelegatorFeatureIds() {
      if (this.isDelegatorMode()) {
        var delegatorObj = (0, _Storage2.default)().getValue((0, _Storage2.default)().options.DELEGATOR);
        var switchType = delegatorObj.st;

        if (switchType == 3 || switchType == 2) {
          var delegatedUserRoles = delegatorObj.dur;
          return delegatedUserRoles[0].self;
        } else {
          var featureIds = (0, _Storage2.default)().getValue((0, _Storage2.default)().options.USER_ROLES);
          return featureIds[0][this.getDelegatorOrgId()][this.getDelegatorUserId()];
        }
      }
    }
  }]);

  return Authorisation;
}();

var objAuthorisation = new Authorisation();

exports.default = objAuthorisation;