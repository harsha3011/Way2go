'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Snackbar = require('material-ui/Snackbar');

var _Snackbar2 = _interopRequireDefault(_Snackbar);

var _muiThemeable = require('material-ui/styles/muiThemeable');

var _muiThemeable2 = _interopRequireDefault(_muiThemeable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AlertService = function (_React$Component) {
  _inherits(AlertService, _React$Component);

  function AlertService(props) {
    _classCallCheck(this, AlertService);

    var _this = _possibleConstructorReturn(this, (AlertService.__proto__ || Object.getPrototypeOf(AlertService)).call(this, props));

    _this.state = { open: false, message: "" };

    _this.handleRequestClose = _this.handleRequestClose.bind(_this);

    _this.timer = undefined;
    return _this;
  }

  _createClass(AlertService, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setState({ message: this.props.message, open: true });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState({
        open: true,
        message: nextProps.message
      });
    }
  }, {
    key: 'handleRequestClose',
    value: function handleRequestClose() {
      this.setState({ open: false });
      if (this.props.handleRequestClose) this.props.handleRequestClose();
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Snackbar2.default, {
        bodyStyle: { backgroundColor: this.props.muiTheme.palette.primaryDarkColor },
        open: this.state.open,
        message: this.state.message,
        autoHideDuration: 4000,
        onRequestClose: this.handleRequestClose
      });
    }
  }]);

  return AlertService;
}(_react2.default.Component);

exports.default = (0, _muiThemeable2.default)()(AlertService);