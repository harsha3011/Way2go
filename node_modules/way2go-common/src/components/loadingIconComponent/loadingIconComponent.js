import React from 'react';
import muiThemeable from 'material-ui/styles/muiThemeable';

class LoadingIconComponent extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      show: this.props.show,
      totalTimeElapsed: 0,
      interval: 10,
      t: 0,
      c: 1,
      b: 0,
      d: 4000
    }



    this.initialize = this.initialize.bind(this);
    this.frame = this.frame.bind(this);
  }

  initialize() {
    this.setState({
      totalTimeElapsed: 0,
      t: 0
    });

    clearInterval(this.loadingInterval);
    this.loadingInterval = setInterval(this.frame, this.state.interval);
  }

  componentWillMount() {
    switch(this.props.size) {
        case 'big':
            this.setState({
              center: 55,
              dimension: 110,
              image: 'LOGO-BIG.gif',
              d: 4000});
            break;
        case 'medium':
            this.setState({
              center: 30,
              dimension: 60,
              image: 'LOGO-MEDIUM.gif',
              d: 3000});
            break;
        case 'small':
            this.setState({
              center: 13,
              dimension: 26,
              image: 'LOGO-SMALL.gif',
              d: 3000});
            break;
    }

    if(this.props.show == true) {
      this.initialize();
    }
  }

  frame() {
    if (this.state.t == this.state.d) {
        this.setState({t: 0});

        if(this.state.totalTimeElapsed > 180000) {
            clearInterval(this.loadingInterval);
        }

    } else {
        this.setState({totalTimeElapsed: this.state.totalTimeElapsed + this.state.interval, t: this.state.t + this.state.interval});

        // t: current time, b: begInnIng value, c: change In value, d: duration
        var t = this.state.t, b = this.state.b, c = this.state.c, d = this.state.d;

        this.setState({offset: c * Math.sin(t/d * (Math.PI/2)) + b});
    };
  }

  componentWillReceiveProps(nextProps) {
    if(nextProps.show != this.state.show) {
      this.setState({show: nextProps.show});
      if(nextProps.show) {
        this.initialize();
      } else {
        clearInterval(this.loadingInterval);
      }
    }
  }

  componentWillUnmount() {
    clearInterval(this.loadingInterval);
  }

  render(props) {
    if(!this.state.show)
      return null;

    let style = this.props.blockinput ? {margin: 'auto', width: this.state.dimension, position: 'relative', top: '50px', marginBottom: '-50px'} : {margin: 'auto'};

    return(
      <div>
        {this.props.blockinput && <div style={{width: '100%', height: '100%', backgroundColor: 'black', position: 'absolute', opacity: '0.5'}}></div>}
      <div style={style}>
        <svg height={this.state.dimension} width={this.state.dimension}>
            <switch>
              {this.props.size == 'big' && <g>
                    <defs>
                        <linearGradient id="grad1" x1="0" y1="1" x2="0" y2="0">
                          <stop style={{'stopColor': this.props.muiTheme.palette.primary1Color, 'stopOpacity':1}} offset={this.state.offset}>

                          </stop>

                          <stop style={{'stopColor': 'rgb(255,255,255)', 'stopOpacity':1}}>

                          </stop>

                        </linearGradient>
                    </defs>
                    <circle cx={this.state.center} cy={this.state.center} r="51" strokeWidth="2"  fill="url(#grad1)" stroke={this.props.muiTheme.palette.primary1Color}></circle>
                    <circle cx={this.state.center} cy={this.state.center} r="30" stroke="black" strokeWidth="0" fill="#f7f7f7"></circle><image href={require('../../assets/images/loading-images/48-x-17.png')} x={this.state.center - 24} y={this.state.center - 7} height="17px" width="48px"/>
                </g>}
              {this.props.size == 'medium' && <g>
                    <defs>
                        <linearGradient id="grad1" x1="0" y1="1" x2="0" y2="0">
                        <stop style={{'stopColor': this.props.muiTheme.palette.primary1Color, 'stopOpacity':1}} offset={this.state.offset}>

                        </stop>
                        <stop style={{'stopColor': 'rgb(255,255,255)', 'stopOpacity':1}}>

                        </stop>

                        </linearGradient>
                    </defs>
                    <circle cx={this.state.center} cy={this.state.center} r="25" strokeWidth="1"  fill="url(#grad1)" stroke={this.props.muiTheme.palette.primary1Color}></circle>
                    <circle cx={this.state.center} cy={this.state.center} r="10" stroke="black" strokeWidth="0" fill="#f7f7f7" />
                </g>}
              {this.props.size == 'small' && <g>
                    <defs>
                        <linearGradient id="grad1" x1="0" y1="1" x2="0" y2="0">
                        <stop style={{'stopColor': this.props.muiTheme.palette.primary1Color, stopOpacity: 1}} offset={this.state.offset}>

                        </stop>
                        <stop style={{'stopColor':'rgb(255,255,255)', 'stopOpacity':1}}>

                        </stop>
                        </linearGradient>
                    </defs>
                    <circle cx={this.state.center} cy={this.state.center} r="10" strokeWidth="1"  fill="url(#grad1)" stroke={this.props.muiTheme.palette.primary1Color}></circle>
                </g>}
                <foreignObject>
                    <img src={'public/core/assets/images/loading-images/' + this.state.image} />
                </foreignObject>
            </switch>
        </svg>

      </div>
      </div>
    );
  }
}

export default muiThemeable()(LoadingIconComponent);
