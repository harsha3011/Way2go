import Cookies from 'js-cookie';

const storage = () => {
    let storage = {};
    storage.options = {
        'AUTH_TOKEN': { key: 'authtoken' },
        'ORG_ID': { key: 'orgId', defaultValue: 1001 },
        'LOCALE': { key: 'locale', defaultValue: 'en-us' },
        'THEME': { key: 'theme', defaultValue: {primary: 'primaryPalette', secondary: 'secondaryPalette', warn: 'warnPalette'}},
        'THEME_PRIMARY': { key: 'primary', defaultValue: 'primaryPalette' },
        'THEME_SECONDARY': { key: 'secondary', defaultValue: 'secondaryPalette' },
        'THEME_WARNING': { key: 'warn', defaultValue: 'warnPalette' },
        'THEME_BACKGROUND': { key: 'background', defaultValue: 'grey' },
	    'USER_ROLES': {key : 'ur'},
        'DELEGATOR': { key: 'delegator' },
        'USER_ID': {key: 'userId'},
        'USERNAME': { key: 'un'},
        'USER_DETAILS': {key: 'ud'}
    };

    storage.cookieExpiry = 7;
    storage.getValue = function (option) {
        if (this.isLocalStorageSupported()) {
            return localStorage.getItem(option.key) ? JSON.parse(localStorage.getItem(option.key)) : option.defaultValue;
        } else {
            return Cookies.get(option.key) ? JSON.parse(Cookies.get(option.key)) : option.defaultValue;
        }
    };

    storage.setValue = function (option, value, storeAsString) {
        if (this.isLocalStorageSupported()) {
            if (isNaN(value) || storeAsString) {
                localStorage.setItem(option.key, JSON.stringify(value));
            } else {
                localStorage.setItem(option.key, value);
            }
        } else {
            Cookies.set(option.key, JSON.stringify(value), { expires: this.cookieExpiry });
        }
    };

    storage.removeKey = function (option) {
        if (this.isLocalStorageSupported()) {
            delete localStorage[option.key];
        } else {
            Cookies.remove(option.key);
        }
    };

    storage.cleanStorage = function () {
        if (this.isLocalStorageSupported()) {
            let key = null;
            for (key in localStorage) {
                if (key != this.options.ORG_ID.key) {  // except for orgId remove all cookies
                    delete localStorage[key];
                }
            }
        } else {
            let cookieList = Cookies.get();
            for (var cookie in cookieList) {
                if (cookie != "orgId") {  // except for orgId remove all cookies
                  Cookies.remove(cookie);
                }
            }
        }
    };

    // To get the Auth Token
    storage.getAuthToken = function () {
        try {
            return this.getValue(this.options.AUTH_TOKEN);
        } catch (e) {
            alert('getAuthToken' + e.message);
        }

    };

    // Check if local storage is supported
    storage.isLocalStorageSupported = function () {
        try {
            var test = localStorage;

            return true;
        } catch (e) {
            return false;
        }

    };

    // Check if local storage is supported
    storage.isAuthenticated = function () {
        try {
            const result = this.getValue(this.options.AUTH_TOKEN);
            if(result)
                return true;
            else
                return false;
        } catch (e) {
            return false;
        }

    };

    return storage;
}

export default storage;
