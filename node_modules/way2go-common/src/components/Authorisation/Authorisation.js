import Storage from '../Storage/';

class Authorisation {
  constructor() {
    this.features = {
      "default_access": {"featureId": []},
      "booking_access":{"featureId": [4010,5010]},
      "analytics_access": {"featureId": [9010]},
      "admin_access": {"featureId": [1010,  1011,  1012,  1013,  1014,  1015,  1016,  1017,  1018, 2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,3010,3011,3012,3013,3014,3015,3016,3017,3018]},
      "landingpage_mytravels": {"featureId": [4020,5020]},
      "landingpage_myteam_travels": {"featureId": [4021,5021]},
      "tmc_travel_access": {"featureId": [4510]},
      "tmc_accomodation_access": {"featureId": [5024]},
      "tmc_expense_access": {"featureId": [6014]},
      "booking_flight": {"featureId": [4010]},
      "booking_accommodation": {"featureId": [5010]},
      "/bookingPage": {"featureId": [4010,5010]},
      "/travelDetailsPage": {"featureId": [4011,5011]},
      "/travelSearchResults": {"featureId": [4012,5012]},
      "/preConfirmationPage": {"featureId": [4013,5013]},
      "/itineraryPage": {"featureId": [4014,5014]},
      "/tmcLanding": {"featureId": [4510,5510]},
      "/unauthorizedPage": {"featureId": []},
      "delegator_access": {"featureId": [3010]},
      "techSupport_access":{"featureId": [1110]},
      "impersonateTC_access": {"featureId": [4511,5511]},
      "/userSelectorTS": {"featureId": [1110]},
      "/userSelectorTC": {"featureId": [4511,5511]},
      "/expensePage": {"featureId": [6010]},
      "/expenseLanding": {"featureId": [6010]},
      "tmc_access": {"featureId": [4510,5510]},
      "cubepage_access": {"featureId": [1010,2010]},
      "/orgPage": {"featureId": [1010]},
      "/userPage": {"featureId": [3016]},
      "/modulePage": {"featureId": [1012]},
      "/rolePage": {"featureId": [1016]},
      "/partnerPage": {"featureId": [1017]},
      "/genericPage": {"featureId": [1017]},
      "/airlineSabrePage": {"featureId": [1017]},
      "/hotelSabrePage": {"featureId": [1017]},
      "/countryCurrencyPage": {"featureId": [1021]},
      "/addCountryCurrency": {"featureId": [1021]},
      "/cityMasterPage": {"featureId": [1021]},
      "/addCityMasterPage": {"featureId": [1021]},
      "/smtpSettingsPage": {"featureId": [1015]},
      "/productSettingsPage": {"featureId": [2010]},
      "/notificationSettingsPage": {"featureId": [2017]},
      "/expenseSettingsPage": {"featureId": [2020]},
      "/ruleFilePage": {"featureId": [2012,2013]},
      "/addUserPage": {"featureId": [3013,3014,3015]},
      "/groupMasterPage": {"featureId": [3017,3018]},
      "/addMasterGroup": {"featureId": [3017,3018]},
      "/travelPartnerPage": {"featureId": [2018]},
      "/hospitalityPartnerPage": {"featureId": [2019]},
      "/groupExpenseMasterPage": {"featureId": [2020]},
      "/masterPage": {"featureId": [1021]},
      "/authenticationSettingsPage":{"featureId": [2112]},
      "/enterPriseProfilePage":{"featureId": [2111]},
      "/viewApiDetailsPage":{"featureId": [2110]},
      "tmc_assignTask": {"featureId": [1112]},
      "tmc_unAssignTask": {"featureId": [1113]},
      "payment_batch_access": {"featureId": [6019]},
      "manager_approval_access":{"featureId": [6013]},
      "travel_allowance_access": {"featureId": [6018]},
      "sbt": {"featureId": "4030"}
    }

    this.hasPermission = this.hasPermission.bind(this);
    this.hasPermissionWithKey = this.hasPermissionWithKey.bind(this);
    this.getDelegatorName = this.getDelegatorName.bind(this);
    this.isDelegatorMode = this.isDelegatorMode.bind(this);
    this.saveDelegatorObj = this.saveDelegatorObj.bind(this);
  }

  hasPermission(obj) {
    if(typeof obj !== 'object')
      obj = JSON.parse(obj);

    var featureId = obj.featureId;
    //return checkRolesNModulesV2(modules, roles);
    return this.checkRolesNModules(featureId);

  }

  hasPermissionWithKey(key, isPage){

    if(isPage == undefined && this.features[key] == undefined) //if key not present return true;
      return false;

    var featureId = this.features[key].featureId;
    //var roles = thisObj.features[key].roles;
    if(key==="default_access")
    	return true;
    else
        return this.checkRolesNModules(featureId);
  }

  checkRolesNModules(featureId){
    let result = false;
    try{
      let userRoles = Storage().getValue(Storage().options.USER_ROLES);
      let delegatorMode = this.isDelegatorMode();
      let featureIds = [];

      if(delegatorMode == false) {
        featureIds = userRoles[0].self;
      } else {
        featureIds = this.getDelegatorFeatureIds();
      }
      result = this.checkObject(featureIds, featureId);
    }
    catch(err){

    }
    return result;
  }

  checkObject(featureIds, featureId){
    var result = false;
    featureIds.forEach(function(data){
      if(featureId.indexOf(data) !== -1) {
	result = true;
      }
    });

    return result;
  }

  saveDelegatorObj(delegator) {
    let objDelegator = {
	  dm: true,
	  doid: delegator.orgId,
	  duid: delegator.userId,
	  dname: delegator.firstName + ' ' + delegator.lastName,
      dur: delegator.delegatorUserRoles,
      st: delegator.switchType
	}

    Storage().setValue(Storage().options.DELEGATOR, objDelegator);
  }

  isDelegatorMode() {
    let delegatorObj = Storage().getValue(Storage().options.DELEGATOR);
    return delegatorObj != undefined && delegatorObj.dm;
  }

  getDelegatorOrgId() {
    let delegatorObj = Storage().getValue(Storage().options.DELEGATOR);
    return delegatorObj && delegatorObj.doid;
  }

  getDelegatorUserId() {
    let delegatorObj = Storage().getValue(Storage().options.DELEGATOR);
    return delegatorObj && delegatorObj.duid;
  }

  getDelegatorName() {
    let delegatorObj = Storage().getValue(Storage().options.DELEGATOR);
    return delegatorObj && delegatorObj.dname;
  }

  getDelegatorFeatureIds() {
    if(this.isDelegatorMode()) {
      let delegatorObj = Storage().getValue(Storage().options.DELEGATOR);
      let switchType = delegatorObj.st;

      if(switchType == 3 || switchType == 2) {
        let delegatedUserRoles = delegatorObj.dur;
        return delegatedUserRoles[0].self;
      } else {
        let featureIds = Storage().getValue(Storage().options.USER_ROLES);
        return featureIds[0][this.getDelegatorOrgId()][this.getDelegatorUserId()];
      }
    }

  }
}

let objAuthorisation = new Authorisation();

export default objAuthorisation;
