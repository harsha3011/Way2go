class Utils{
    static objectIsEmpty = function(obj) {
        for(var prop in obj) {
            if(obj.hasOwnProperty(prop))
                 return false;
            }
            return true;
    }

    static getParameterByName = function(name, url) {
        if (!url) {
        url = window.location.href;
        }
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[/?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    }

    static normalizeLocale = function(locale) {
       return locale.replace(/_/g,'-').toLowerCase();
    }

    static toTitleCase = function(str) {
       return str.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
    }

    static checkAbsoluteUrl = function(str){
        var pat = /^https?:\/\//i;
        if (pat.test(str))
            return true;
        else
            return false;
    }

    static getWSConnectionStatus = function(ws){
       var status = "";
       if(ws.readyState === ws.CLOSED){
            status = "Closed";
       }
       else if(ws.readyState === ws.OPEN){
           status = "Open";
       }
       else if(ws.readyState === ws.CONNECTING){
           status = "Connecting";
       }
       else if(ws.readyState === ws.CLOSING){
           status = "Closing";
       }
    
       return "WS Status - " + status + " - " + new Date();
    }

    static setDefaultLocale = function(){
        //start - set default locale, if locale not supported
        var language = storageObject.getValue(storageObject.options.LOCALE); //getLocale();
        var localesSupportedArray = constants.supportedLocales;
        if (localesSupportedArray.indexOf(language) == -1) { //set default locale if locale not supported
        storageObject.setValue(storageObject.options.LOCALE, constants.defaultLocale); 
        }
        //end
    }

    static getPageNameFromRelativePath = function(url){
        //start - set default locale, if locale not supported
        var result;
        if(url!=undefined){
            try{
                result = url.split('?')[0];
            }
            catch(ex){
    
            }
        }
        return result;
        //end
    }

    static dataURItoBlob = function(dataURI, fileName){
    // convert base64/URLEncoded data component to raw binary data held in a string
    var byteString;
    if (dataURI.split(',')[0].indexOf('base64') >= 0)
        byteString = atob(dataURI.split(',')[1]);
    else
        byteString = unescape(dataURI.split(',')[1]);
    // separate out the mime component
    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
    // write the bytes of the string to a typed array
    var ia = new Uint8Array(byteString.length);
    for (var i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
    }
    var file = new Blob([ia], {type:mimeString});
    
    if(fileName)
        file.name = fileName;
    
    return file;
    }

    static dataURLtoFile = function(dataurl, filename){
        var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],
            bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
        while(n--){
            u8arr[n] = bstr.charCodeAt(n);
        }
        return new File([u8arr], filename, {type:mime});
    }

    static convertDateToUTC = (value) => {
        return (new Date(value.getTime() + value.getTimezoneOffset() * 60 * 1000));
    }
    
    static convertDateFromUTC = (value) => {
        return (new Date(value.getTime() - value.getTimezoneOffset() * 60 * 1000));
    }
}

export default Utils;


